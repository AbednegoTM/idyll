[
  {
    "component": "TextContainer",
    "children": [
      {
        "component": "h1",
        "children": [
          {
            "id": 12,
            "type": "textnode",
            "value": "Welcome to Idyll"
          }
        ]
      },
      {
        "component": "h3",
        "children": [
          {
            "id": 14,
            "type": "textnode",
            "value": "Idyll is a language for creating interactive documents on the web."
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 16,
            "type": "textnode",
            "value": "This document is being rendered from "
          },
          {
            "component": "strong",
            "children": [
              {
                "id": 18,
                "type": "textnode",
                "value": "Idyll markup"
              }
            ]
          },
          {
            "id": 19,
            "type": "textnode",
            "value": ". If you’ve used "
          },
          {
            "component": "a",
            "href": "https://daringfireball.net/projects/markdown/",
            "children": [
              {
                "id": 21,
                "type": "textnode",
                "value": "markdown"
              }
            ]
          },
          {
            "id": 22,
            "type": "textnode",
            "value": ", Idyll should look pretty familiar, but it has some additional features. Write text in the box on the left and the output on the right will automatically update."
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 24,
            "type": "textnode",
            "value": "To make things a little more interesting you can add JavaScript components to your text.\nFor example, a "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 26,
                "type": "textnode",
                "value": "[Chart /]"
              }
            ]
          },
          {
            "id": 27,
            "type": "textnode",
            "value": " component can be used to render a simple visualization:"
          }
        ]
      },
      {
        "component": "Chart",
        "type": "scatter",
        "children": []
      },
      {
        "component": "p",
        "children": [
          {
            "id": 30,
            "type": "textnode",
            "value": "Try changing the chart’s type from "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 32,
                "type": "textnode",
                "value": "scatter"
              }
            ]
          },
          {
            "id": 33,
            "type": "textnode",
            "value": " to "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 35,
                "type": "textnode",
                "value": "line"
              }
            ]
          },
          {
            "id": 36,
            "type": "textnode",
            "value": ", "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 38,
                "type": "textnode",
                "value": "area"
              }
            ]
          },
          {
            "id": 39,
            "type": "textnode",
            "value": ", or "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 41,
                "type": "textnode",
                "value": "pie"
              }
            ]
          },
          {
            "id": 42,
            "type": "textnode",
            "value": "."
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 44,
            "type": "textnode",
            "value": "A component’s properties can be strings (“I’m a string!”), numbers (1.569), or evaluated JavaScript expressions ("
          },
          {
            "component": "code",
            "children": [
              {
                "id": 46,
                "type": "textnode",
                "value": "`2 * Math.PI`"
              }
            ]
          },
          {
            "id": 47,
            "type": "textnode",
            "value": ")."
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 49,
            "type": "textnode",
            "value": "There are a number of components available — see "
          },
          {
            "component": "a",
            "href": "https://idyll-lang.github.io/components-built-in",
            "children": [
              {
                "id": 51,
                "type": "textnode",
                "value": "Idyll’s documentation"
              }
            ]
          },
          {
            "id": 52,
            "type": "textnode",
            "value": " for a full list — Additional components can be installed via "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 54,
                "type": "textnode",
                "value": "npm"
              }
            ]
          },
          {
            "id": 55,
            "type": "textnode",
            "value": " (any React component should work), and if you are comfortable with JavaScript you can write "
          },
          {
            "component": "a",
            "href": "https://idyll-lang.github.io/components-custom",
            "children": [
              {
                "id": 57,
                "type": "textnode",
                "value": "custom components"
              }
            ]
          },
          {
            "id": 58,
            "type": "textnode",
            "value": " as well."
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 60,
            "type": "textnode",
            "value": "Idyll also provides a reactive variable system that can be used to dynamically update the text based on input from a reader."
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 62,
            "type": "textnode",
            "value": "Instantiating a variable is similar to instantiating a component:"
          }
        ]
      },
      {
        "component": "code",
        "children": [
          {
            "id": 64,
            "type": "textnode",
            "value": "[var name:\"x\" value:1 /]"
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 66,
            "type": "textnode",
            "value": "Once you’ve created a variable, it can be displayed inline with text\n(x = "
          },
          {
            "component": "Display",
            "__vars__": {
              "var": "x"
            },
            "var": "x",
            "children": []
          },
          {
            "id": 68,
            "type": "textnode",
            "value": "),\nor be used to parameterize components. Derived variables can be used to create values that depend on other variables, similar to a formula in Excel:"
          }
        ]
      },
      {
        "component": "code",
        "children": [
          {
            "id": 70,
            "type": "textnode",
            "value": "[derived name:\"xSquared\" value:`x * x` /]"
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 72,
            "type": "textnode",
            "value": "Here I bind the value of "
          },
          {
            "component": "code",
            "children": [
              {
                "id": 74,
                "type": "textnode",
                "value": "x"
              }
            ]
          },
          {
            "id": 75,
            "type": "textnode",
            "value": " to a range slider. Move the slider and watch the variables update."
          }
        ]
      },
      {
        "component": "Range",
        "__vars__": {
          "value": "x"
        },
        "value": "x",
        "min": 0,
        "max": 100,
        "children": []
      },
      {
        "component": "p",
        "children": [
          {
            "component": "equation",
            "children": [
              {
                "id": 79,
                "type": "textnode",
                "value": "x"
              }
            ]
          },
          {
            "id": 80,
            "type": "textnode",
            "value": ":\n "
          },
          {
            "component": "Display",
            "__expr__": {
              "var": "x"
            },
            "var": "x",
            "children": []
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "component": "equation",
            "children": [
              {
                "id": 84,
                "type": "textnode",
                "value": "x^2"
              }
            ]
          },
          {
            "id": 85,
            "type": "textnode",
            "value": ":"
          },
          {
            "component": "Display",
            "__expr__": {
              "var": "xSquared"
            },
            "var": "xSquared",
            "children": []
          }
        ]
      },
      {
        "component": "p",
        "children": [
          {
            "id": 88,
            "type": "textnode",
            "value": "Test expression, displays:"
          }
        ]
      },
      {
        "component": "Display",
        "id": "varDisplay",
        "__expr__": {
          "value": "x"
        },
        "value": "x",
        "children": []
      },
      {
        "component": "Display",
        "id": "derivedVarDisplay",
        "__expr__": {
          "value": "xSquared"
        },
        "value": "xSquared",
        "children": []
      },
      {
        "component": "Display",
        "id": "derivedVarDisplay2",
        "__expr__": {
          "value": "xCubed"
        },
        "value": "xCubed",
        "children": []
      },
      {
        "component": "Display",
        "id": "strDisplay",
        "__expr__": {
          "value": "\"string\""
        },
        "value": "\"string\"",
        "children": []
      },
      {
        "component": "Display",
        "id": "staticObjectDisplay",
        "__expr__": {
          "value": "{ static: \"object\" }"
        },
        "value": "{ static: \"object\" }",
        "children": []
      },
      {
        "component": "Display",
        "id": "dynamicObjectDisplay",
        "__expr__": {
          "value": "{ dynamic: x }"
        },
        "value": "{ dynamic: x }",
        "children": []
      },
      {
        "component": "Display",
        "id": "dataDisplay",
        "__expr__": {
          "value": "myData"
        },
        "value": "myData",
        "children": []
      },
      {
        "component": "Display",
        "id": "bareDataDisplay",
        "__vars__": {
          "value": "myData"
        },
        "value": "myData",
        "children": []
      },
      {
        "component": "Display",
        "id": "bareVarDisplay",
        "__vars__": {
          "value": "x"
        },
        "value": "x",
        "children": []
      },
      {
        "component": "Display",
        "id": "bareDerivedDisplay",
        "__vars__": {
          "value": "xSquared"
        },
        "value": "xSquared",
        "children": []
      },
      {
        "component": "Display",
        "id": "bareDerivedDisplay2",
        "__vars__": {
          "value": "xCubed"
        },
        "value": "xCubed",
        "children": []
      },
      {
        "component": "Display",
        "id": "objectVarDisplay",
        "__expr__": {
          "value": " objectVar "
        },
        "value": " objectVar ",
        "children": []
      },
      {
        "component": "Display",
        "id": "bareObjectVarDisplay",
        "__vars__": {
          "value": "objectVar"
        },
        "value": "objectVar",
        "children": []
      },
      {
        "component": "Display",
        "id": "arrayVarDisplay",
        "__expr__": {
          "value": " arrayVar "
        },
        "value": " arrayVar ",
        "children": []
      },
      {
        "component": "Display",
        "id": "bareArrayVarDisplay",
        "__vars__": {
          "value": "arrayVar"
        },
        "value": "arrayVar",
        "children": []
      },
      {
        "component": "br",
        "children": []
      },
      {
        "component": "p",
        "children": [
          {
            "id": 106,
            "type": "textnode",
            "value": "Here is an example of how you could use a variable to control the frequency of a sine wave:"
          }
        ]
      },
      {
        "component": "Chart",
        "__expr__": {
          "equation": "(t) => Math.sin(t * frequency)",
          "domain": "[0, 2 * Math.PI]"
        },
        "equation": "(t) => Math.sin(t * frequency)",
        "domain": "[0, 2 * Math.PI]",
        "samplePoints": 1000,
        "children": []
      },
      {
        "component": "Range",
        "__vars__": {
          "value": "frequency"
        },
        "value": "frequency",
        "min": 0.5,
        "__expr__": {
          "max": "2 * Math.PI"
        },
        "max": "2 * Math.PI",
        "step": 0.0001,
        "children": []
      },
      {
        "component": "p",
        "children": [
          {
            "component": "Display",
            "id": "lateVarDisplay",
            "__vars__": {
              "value": "lateVar"
            },
            "value": "lateVar",
            "children": []
          },
          {
            "id": 111,
            "type": "textnode",
            "value": "\nLate Var Range:"
          }
        ]
      },
      {
        "component": "Range",
        "__vars__": {
          "value": "lateVar"
        },
        "value": "lateVar",
        "min": 2,
        "max": 100,
        "children": []
      },
      {
        "component": "p",
        "children": [
          {
            "id": 114,
            "type": "textnode",
            "value": "Read more about Idyll at "
          },
          {
            "component": "a",
            "href": "https://idyll-lang.github.io/",
            "children": [
              {
                "id": 116,
                "type": "textnode",
                "value": "https://idyll-lang.github.io/"
              }
            ]
          },
          {
            "id": 117,
            "type": "textnode",
            "value": ", and come say “Hi!” in our "
          },
          {
            "component": "a",
            "href": "https://gitter.im/idyll-lang/Lobby",
            "children": [
              {
                "id": 119,
                "type": "textnode",
                "value": "chatroom on gitter"
              }
            ]
          },
          {
            "id": 120,
            "type": "textnode",
            "value": "."
          }
        ]
      }
    ]
  }
]
